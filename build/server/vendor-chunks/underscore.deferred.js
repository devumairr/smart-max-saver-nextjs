/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/underscore.deferred";
exports.ids = ["vendor-chunks/underscore.deferred"];
exports.modules = {

/***/ "(ssr)/./node_modules/underscore.deferred/underscore.deferred.js":
/*!*****************************************************************!*\
  !*** ./node_modules/underscore.deferred/underscore.deferred.js ***!
  \*****************************************************************/
/***/ (function(module) {

eval("(function(root) {\n    // Let's borrow a couple of things from Underscore that we'll need\n    // _.each\n    var breaker = {}, AP = Array.prototype, OP = Object.prototype, hasOwn = OP.hasOwnProperty, toString = OP.toString, forEach = AP.forEach, indexOf = AP.indexOf, slice = AP.slice;\n    var _each = function(obj, iterator, context) {\n        var key, i, l;\n        if (!obj) {\n            return;\n        }\n        if (forEach && obj.forEach === forEach) {\n            obj.forEach(iterator, context);\n        } else if (obj.length === +obj.length) {\n            for(i = 0, l = obj.length; i < l; i++){\n                if (i in obj && iterator.call(context, obj[i], i, obj) === breaker) {\n                    return;\n                }\n            }\n        } else {\n            for(key in obj){\n                if (hasOwn.call(obj, key)) {\n                    if (iterator.call(context, obj[key], key, obj) === breaker) {\n                        return;\n                    }\n                }\n            }\n        }\n    };\n    // _.isFunction\n    var _isFunction = function(obj) {\n        return !!(obj && obj.constructor && obj.call && obj.apply);\n    };\n    // _.extend\n    var _extend = function(obj) {\n        _each(slice.call(arguments, 1), function(source) {\n            var prop;\n            for(prop in source){\n                if (source[prop] !== void 0) {\n                    obj[prop] = source[prop];\n                }\n            }\n        });\n        return obj;\n    };\n    // $.inArray\n    var _inArray = function(elem, arr, i) {\n        var len;\n        if (arr) {\n            if (indexOf) {\n                return indexOf.call(arr, elem, i);\n            }\n            len = arr.length;\n            i = i ? i < 0 ? Math.max(0, len + i) : i : 0;\n            for(; i < len; i++){\n                // Skip accessing in sparse arrays\n                if (i in arr && arr[i] === elem) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    };\n    // And some jQuery specific helpers\n    var class2type = {};\n    // Populate the class2type map\n    _each(\"Boolean Number String Function Array Date RegExp Object\".split(\" \"), function(name, i) {\n        class2type[\"[object \" + name + \"]\"] = name.toLowerCase();\n    });\n    var _type = function(obj) {\n        return obj == null ? String(obj) : class2type[toString.call(obj)] || \"object\";\n    };\n    // Now start the jQuery-cum-Underscore implementation. Some very\n    // minor changes to the jQuery source to get this working.\n    // Internal Deferred namespace\n    var _d = {};\n    // String to Object options format cache\n    var optionsCache = {};\n    // Convert String-formatted options into Object-formatted ones and store in cache\n    function createOptions(options) {\n        var object = optionsCache[options] = {};\n        _each(options.split(/\\s+/), function(flag) {\n            object[flag] = true;\n        });\n        return object;\n    }\n    _d.Callbacks = function(options) {\n        // Convert options from String-formatted to Object-formatted if needed\n        // (we check in cache first)\n        options = typeof options === \"string\" ? optionsCache[options] || createOptions(options) : _extend({}, options);\n        var memory, // Flag to know if list was already fired\n        fired, // Flag to know if list is currently firing\n        firing, // First callback to fire (used internally by add and fireWith)\n        firingStart, // End of the loop when firing\n        firingLength, // Index of currently firing callback (modified by remove if needed)\n        firingIndex, // Actual callback list\n        list = [], // Stack of fire calls for repeatable lists\n        stack = !options.once && [], // Fire callbacks\n        fire = function(data) {\n            memory = options.memory && data;\n            fired = true;\n            firingIndex = firingStart || 0;\n            firingStart = 0;\n            firingLength = list.length;\n            firing = true;\n            for(; list && firingIndex < firingLength; firingIndex++){\n                if (list[firingIndex].apply(data[0], data[1]) === false && options.stopOnFalse) {\n                    memory = false; // To prevent further calls using add\n                    break;\n                }\n            }\n            firing = false;\n            if (list) {\n                if (stack) {\n                    if (stack.length) {\n                        fire(stack.shift());\n                    }\n                } else if (memory) {\n                    list = [];\n                } else {\n                    self.disable();\n                }\n            }\n        }, // Actual Callbacks object\n        self = {\n            // Add a callback or a collection of callbacks to the list\n            add: function() {\n                if (list) {\n                    // First, we save the current length\n                    var start = list.length;\n                    (function add(args) {\n                        _each(args, function(arg) {\n                            var type = _type(arg);\n                            if (type === \"function\") {\n                                if (!options.unique || !self.has(arg)) {\n                                    list.push(arg);\n                                }\n                            } else if (arg && arg.length && type !== \"string\") {\n                                // Inspect recursively\n                                add(arg);\n                            }\n                        });\n                    })(arguments);\n                    // Do we need to add the callbacks to the\n                    // current firing batch?\n                    if (firing) {\n                        firingLength = list.length;\n                    // With memory, if we're not firing then\n                    // we should call right away\n                    } else if (memory) {\n                        firingStart = start;\n                        fire(memory);\n                    }\n                }\n                return this;\n            },\n            // Remove a callback from the list\n            remove: function() {\n                if (list) {\n                    _each(arguments, function(arg) {\n                        var index;\n                        while((index = _inArray(arg, list, index)) > -1){\n                            list.splice(index, 1);\n                            // Handle firing indexes\n                            if (firing) {\n                                if (index <= firingLength) {\n                                    firingLength--;\n                                }\n                                if (index <= firingIndex) {\n                                    firingIndex--;\n                                }\n                            }\n                        }\n                    });\n                }\n                return this;\n            },\n            // Control if a given callback is in the list\n            has: function(fn) {\n                return _inArray(fn, list) > -1;\n            },\n            // Remove all callbacks from the list\n            empty: function() {\n                list = [];\n                return this;\n            },\n            // Have the list do nothing anymore\n            disable: function() {\n                list = stack = memory = undefined;\n                return this;\n            },\n            // Is it disabled?\n            disabled: function() {\n                return !list;\n            },\n            // Lock the list in its current state\n            lock: function() {\n                stack = undefined;\n                if (!memory) {\n                    self.disable();\n                }\n                return this;\n            },\n            // Is it locked?\n            locked: function() {\n                return !stack;\n            },\n            // Call all callbacks with the given context and arguments\n            fireWith: function(context, args) {\n                args = args || [];\n                args = [\n                    context,\n                    args.slice ? args.slice() : args\n                ];\n                if (list && (!fired || stack)) {\n                    if (firing) {\n                        stack.push(args);\n                    } else {\n                        fire(args);\n                    }\n                }\n                return this;\n            },\n            // Call all the callbacks with the given arguments\n            fire: function() {\n                self.fireWith(this, arguments);\n                return this;\n            },\n            // To know if the callbacks have already been called at least once\n            fired: function() {\n                return !!fired;\n            }\n        };\n        return self;\n    };\n    _d.Deferred = function(func) {\n        var tuples = [\n            // action, add listener, listener list, final state\n            [\n                \"resolve\",\n                \"done\",\n                _d.Callbacks(\"once memory\"),\n                \"resolved\"\n            ],\n            [\n                \"reject\",\n                \"fail\",\n                _d.Callbacks(\"once memory\"),\n                \"rejected\"\n            ],\n            [\n                \"notify\",\n                \"progress\",\n                _d.Callbacks(\"memory\")\n            ]\n        ], state = \"pending\", promise = {\n            state: function() {\n                return state;\n            },\n            always: function() {\n                deferred.done(arguments).fail(arguments);\n                return this;\n            },\n            then: function() {\n                var fns = arguments;\n                return _d.Deferred(function(newDefer) {\n                    _each(tuples, function(tuple, i) {\n                        var action = tuple[0], fn = fns[i];\n                        // deferred[ done | fail | progress ] for forwarding actions to newDefer\n                        deferred[tuple[1]](_isFunction(fn) ? function() {\n                            var returned;\n                            try {\n                                returned = fn.apply(this, arguments);\n                            } catch (e) {\n                                newDefer.reject(e);\n                                return;\n                            }\n                            if (returned && _isFunction(returned.promise)) {\n                                returned.promise().done(newDefer.resolve).fail(newDefer.reject).progress(newDefer.notify);\n                            } else {\n                                newDefer[action !== \"notify\" ? \"resolveWith\" : action + \"With\"](this === deferred ? newDefer : this, [\n                                    returned\n                                ]);\n                            }\n                        } : newDefer[action]);\n                    });\n                    fns = null;\n                }).promise();\n            },\n            // Get a promise for this deferred\n            // If obj is provided, the promise aspect is added to the object\n            promise: function(obj) {\n                return obj != null ? _extend(obj, promise) : promise;\n            }\n        }, deferred = {};\n        // Keep pipe for back-compat\n        promise.pipe = promise.then;\n        // Add list-specific methods\n        _each(tuples, function(tuple, i) {\n            var list = tuple[2], stateString = tuple[3];\n            // promise[ done | fail | progress ] = list.add\n            promise[tuple[1]] = list.add;\n            // Handle state\n            if (stateString) {\n                list.add(function() {\n                    // state = [ resolved | rejected ]\n                    state = stateString;\n                // [ reject_list | resolve_list ].disable; progress_list.lock\n                }, tuples[i ^ 1][2].disable, tuples[2][2].lock);\n            }\n            // deferred[ resolve | reject | notify ] = list.fire\n            deferred[tuple[0]] = list.fire;\n            deferred[tuple[0] + \"With\"] = list.fireWith;\n        });\n        // Make the deferred a promise\n        promise.promise(deferred);\n        // Call given func if any\n        if (func) {\n            func.call(deferred, deferred);\n        }\n        // All done!\n        return deferred;\n    };\n    // Deferred helper\n    _d.when = function(subordinate /* , ..., subordinateN */ ) {\n        var i = 0, resolveValues = _type(subordinate) === \"array\" && arguments.length === 1 ? subordinate : slice.call(arguments), length = resolveValues.length, // the count of uncompleted subordinates\n        remaining = length !== 1 || subordinate && _isFunction(subordinate.promise) ? length : 0, // the master Deferred. If resolveValues consist of only a single Deferred, just use that.\n        deferred = remaining === 1 ? subordinate : _d.Deferred(), // Update function for both resolve and progress values\n        updateFunc = function(i, contexts, values) {\n            return function(value) {\n                contexts[i] = this;\n                values[i] = arguments.length > 1 ? slice.call(arguments) : value;\n                if (values === progressValues) {\n                    deferred.notifyWith(contexts, values);\n                } else if (!--remaining) {\n                    deferred.resolveWith(contexts, values);\n                }\n            };\n        }, progressValues, progressContexts, resolveContexts;\n        // add listeners to Deferred subordinates; treat others as resolved\n        if (length > 1) {\n            progressValues = new Array(length);\n            progressContexts = new Array(length);\n            resolveContexts = new Array(length);\n            for(; i < length; i++){\n                if (resolveValues[i] && _isFunction(resolveValues[i].promise)) {\n                    resolveValues[i].promise().done(updateFunc(i, resolveContexts, resolveValues)).fail(deferred.reject).progress(updateFunc(i, progressContexts, progressValues));\n                } else {\n                    --remaining;\n                }\n            }\n        }\n        // if we're not waiting on anything, resolve the master\n        if (!remaining) {\n            deferred.resolveWith(resolveContexts, resolveValues);\n        }\n        return deferred.promise();\n    };\n    // Try exporting as a Common.js Module\n    if ( true && module.exports) {\n        module.exports = _d;\n    // Or mixin to Underscore.js\n    } else if (typeof root._ !== \"undefined\") {\n        root._.mixin(_d);\n    // Or assign it to window._\n    } else {\n        root._ = _d;\n    }\n})(this);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/underscore.deferred/underscore.deferred.js\n");

/***/ })

};
;